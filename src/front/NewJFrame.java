/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package front;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Style;
import javax.swing.text.StyledDocument;
import model.Etudiant;

/**
 *
 * @author Fitahiana
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        loadDataFromAPI();
        
        jTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Récupérer les valeurs de la ligne sélectionnée
                    int numEt = (int) jTable.getValueAt(selectedRow, 0);
                    String nom = (String) jTable.getValueAt(selectedRow, 1);
                    double noteMath = (double) jTable.getValueAt(selectedRow, 2);
                    double notePhys = (double) jTable.getValueAt(selectedRow, 3);

                    // Afficher les valeurs dans les champs de texte
                    TextNom.setText(nom);
                    TextMath.setText(Double.toString(noteMath));
                    TextPhys.setText(Double.toString(notePhys));
                }
            }
        }
    });
    }
    
    
    
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TextNom = new javax.swing.JTextField();
        TextMath = new javax.swing.JTextField();
        TextPhys = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAjout = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        btnSupprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextStats = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAdmis = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        TextRedoublants = new javax.swing.JTextPane();
        btnRefresh = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextNomActionPerformed(evt);
            }
        });

        TextMath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextMathActionPerformed(evt);
            }
        });

        jLabel1.setText("Nom");

        jLabel2.setText("Note math");

        btnAjout.setText("Ajout");
        btnAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjoutActionPerformed(evt);
            }
        });

        btnModifier.setText("Modifier");
        btnModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierActionPerformed(evt);
            }
        });

        btnSupprimer.setText("Supprimer");
        btnSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprimerActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumEt", "Nom", "Note math", "Note phys", "Moyenne"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);

        jLabel3.setText("Note phys");

        TextStats.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TextStatsAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(TextStats);

        TextAdmis.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TextAdmisAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(TextAdmis);

        TextRedoublants.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TextRedoublantsAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane4.setViewportView(TextRedoublants);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("      JAX-RS PROJECT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TextNom)
                                    .addComponent(TextMath)
                                    .addComponent(TextPhys, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSupprimer)
                                    .addComponent(btnAjout))
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnModifier)
                                    .addComponent(btnRefresh))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(TextNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TextMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(TextPhys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAjout)
                            .addComponent(btnModifier))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSupprimer)
                            .addComponent(btnRefresh)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextNomActionPerformed

    private void TextMathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextMathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextMathActionPerformed

    private void loadDataFromAPI() {
        try {
            // Envoyer une requête GET à l'API pour récupérer tous les étudiants
            URL url = new URL("http://localhost:8080/api/etudiants");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            // Récupérer la réponse de l'API
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Analyser la réponse JSON
                ObjectMapper objectMapper = new ObjectMapper();
                List<Etudiant> etudiants = objectMapper.readValue(response.toString(), new TypeReference<List<Etudiant>>(){});

                // Remplir le tableau avec les données
                DefaultTableModel model = (DefaultTableModel) jTable.getModel();

                // Vider le contenu du tableau avant d'ajouter de nouvelles lignes
                model.setRowCount(0);

                for (Etudiant etudiant : etudiants) {
                    model.addRow(new Object[]{etudiant.getNumEt(), etudiant.getNom(), etudiant.getNoteMath(), etudiant.getNotePhys(), etudiant.getMoyenne()});
                }
            } else {
                System.out.println("Erreur : " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void btnAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjoutActionPerformed
        // TODO add your handling code here:
        // Afficher une boîte de dialogue de confirmation
        int dialogResult = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment ajouter cet étudiant ?", "Confirmation d'ajout", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                // Récupérer les valeurs des champs de texte
                String nom = TextNom.getText();
                double math = Double.parseDouble(TextMath.getText());
                double phys = Double.parseDouble(TextPhys.getText());

                // Créer un objet Etudiant
                Etudiant etudiant = new Etudiant(0, nom, math, phys);

                // Convertir l'objet Etudiant en JSON
                ObjectMapper objectMapper = new ObjectMapper();
                String jsonEtudiant = objectMapper.writeValueAsString(etudiant);

                // Envoyer une requête POST à l'API
                URL url = new URL("http://localhost:8080/api/etudiants");
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "application/json");
                connection.setDoOutput(true);

                OutputStream outputStream = connection.getOutputStream();
                outputStream.write(jsonEtudiant.getBytes());
                outputStream.flush();

                // Vérifier la réponse de l'API
                int responseCode = connection.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    // Ajouter les nouvelles données au modèle de données
                    DefaultTableModel model = (DefaultTableModel) jTable.getModel();
                    model.addRow(new Object[]{etudiant.getNumEt(), etudiant.getNom(), etudiant.getNoteMath(), etudiant.getNotePhys()});

                    // Vider les champs de texte après l'ajout
                    TextNom.setText("");
                    TextMath.setText("");
                    TextPhys.setText("");

                    // Mettre à jour les données de la table
                    loadDataFromAPI();
                    TextStatsAncestorAdded(null);
                    TextAdmisAncestorAdded(null);
                    TextRedoublantsAncestorAdded(null);
                } else {
                    System.out.println("Erreur : " + responseCode);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAjoutActionPerformed

    private void btnModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierActionPerformed
        // TODO add your handling code here:
         // Récupérer la ligne sélectionnée
        int selectedRow = jTable.getSelectedRow();
        if (selectedRow != -1) {
            // Afficher une boîte de dialogue de confirmation
            int dialogResult = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cet étudiant ?", "Confirmation de modification", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    // Récupérer l'ID de l'étudiant à modifier
                    int numEt = (int) jTable.getValueAt(selectedRow, 0);

                    // Récupérer les nouvelles valeurs des champs de texte
                    String nom = TextNom.getText();
                    double noteMath = Double.parseDouble(TextMath.getText());
                    double notePhys = Double.parseDouble(TextPhys.getText());

                    // Créer un objet Etudiant avec les nouvelles valeurs
                    Etudiant etudiant = new Etudiant(numEt, nom, noteMath, notePhys);

                    // Convertir l'objet Etudiant en JSON
                    ObjectMapper objectMapper = new ObjectMapper();
                    String jsonEtudiant = objectMapper.writeValueAsString(etudiant);

                    // Envoyer une requête PUT à l'API
                    URL url = new URL("http://localhost:8080/api/etudiants/" + numEt);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("PUT");
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setDoOutput(true);

                    OutputStream outputStream = connection.getOutputStream();
                    outputStream.write(jsonEtudiant.getBytes());
                    outputStream.flush();

                    // Vérifier la réponse de l'API
                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        // Mettre à jour la ligne dans le tableau
                        jTable.setValueAt(nom, selectedRow, 1);
                        jTable.setValueAt(noteMath, selectedRow, 2);
                        jTable.setValueAt(notePhys, selectedRow, 3);

                        // Mettre à jour les données de la table
                        loadDataFromAPI();
                        TextStatsAncestorAdded(null);
                        TextAdmisAncestorAdded(null);
                        TextRedoublantsAncestorAdded(null);
                    } else {
                        System.out.println("Erreur : " + responseCode);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnModifierActionPerformed

    private void btnSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprimerActionPerformed
        // TODO add your handling code here:
        // Récupérer la ligne sélectionnée
        int selectedRow = jTable.getSelectedRow();
        if (selectedRow != -1) {
            // Afficher une boîte de dialogue de confirmation
            int dialogResult = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cet étudiant ?", "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    // Récupérer l'ID de l'étudiant à supprimer
                    int numEt = (int) jTable.getValueAt(selectedRow, 0);

                    // Envoyer une requête DELETE à l'API
                    URL url = new URL("http://localhost:8080/api/etudiants/" + numEt);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("DELETE");

                    // Vérifier la réponse de l'API
                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
                        // Supprimer la ligne sélectionnée du modèle de données
                        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
                        model.removeRow(selectedRow);
                    } else {
                        System.out.println("Erreur : " + responseCode);
                    }
                    // Mettre à jour les données de la table
                    loadDataFromAPI();
                    TextStatsAncestorAdded(null);
                    TextAdmisAncestorAdded(null);
                    TextRedoublantsAncestorAdded(null);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnSupprimerActionPerformed

    private void TextStatsAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TextStatsAncestorAdded
        // TODO add your handling code here:
            try {
        URL url = new URL("http://localhost:8080/api/etudiants/stats");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            // Lire la réponse JSON
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Effacer le contenu existant du JTextPane
            TextStats.setText("");

            // Convertir la réponse JSON en objet Map
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Double> stats = objectMapper.readValue(response.toString(), new TypeReference<Map<String, Double>>() {});

            // Afficher les statistiques dans le JTextPane
            StyledDocument doc = TextStats.getStyledDocument();
            Style style = doc.addStyle("Style", null);
            for (Map.Entry<String, Double> entry : stats.entrySet()) {
                String stat = entry.getKey() + ": " + entry.getValue() + "\n";
                doc.insertString(doc.getLength(), stat, style);
            }
        } else {
            System.out.println("Erreur : " + responseCode);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_TextStatsAncestorAdded

    private void TextAdmisAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TextAdmisAncestorAdded
        // TODO add your handling code here:
            try {
            // Envoyer une requête GET à l'API pour récupérer le nombre d'étudiants admis
            URL url = new URL("http://localhost:8080/api/etudiants/admis");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Lire la réponse JSON
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Afficher le nombre d'étudiants admis dans le JTextPane
                TextAdmis.setText("Nombre d'étudiants admis : " + response.toString());
            } else {
                System.out.println("Erreur : " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TextAdmisAncestorAdded

    private void TextRedoublantsAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TextRedoublantsAncestorAdded
        // TODO add your handling code here:
            try {
           // Envoyer une requête GET à l'API pour récupérer le nombre d'étudiants redoublants
           URL url = new URL("http://localhost:8080/api/etudiants/redoublants");
           HttpURLConnection connection = (HttpURLConnection) url.openConnection();
           connection.setRequestMethod("GET");

           int responseCode = connection.getResponseCode();
           if (responseCode == HttpURLConnection.HTTP_OK) {
               // Lire la réponse JSON
               BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
               StringBuilder response = new StringBuilder();
               String inputLine;
               while ((inputLine = in.readLine()) != null) {
                   response.append(inputLine);
               }
               in.close();

               // Afficher le nombre d'étudiants redoublants dans le JTextPane
               TextRedoublants.setText("Nombre d'étudiants redoublants : " + response.toString());
           } else {
               System.out.println("Erreur : " + responseCode);
           }
       } catch (Exception e) {
           e.printStackTrace();
       }
    }//GEN-LAST:event_TextRedoublantsAncestorAdded

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        // Vider les champs de texte
        TextNom.setText("");
        TextMath.setText("");
        TextPhys.setText("");
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane TextAdmis;
    private javax.swing.JTextField TextMath;
    private javax.swing.JTextField TextNom;
    private javax.swing.JTextField TextPhys;
    private javax.swing.JTextPane TextRedoublants;
    private javax.swing.JTextPane TextStats;
    private javax.swing.JButton btnAjout;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSupprimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
